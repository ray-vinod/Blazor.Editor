let quill, endpoint, editorInstance, BlockEmbed = Quill.import("blots/block/embed"); class ImageBlot extends BlockEmbed { static create(e) { let t = super.create(); return t.setAttribute("src", e.url), e.alt && t.setAttribute("alt", e.alt), t.classList.add("quill-editor-image-border"), t } static value(e) { return { url: e.getAttribute("src"), alt: e.getAttribute("alt") } } update(e) { e.url && this.domNode.setAttribute("src", e.url), e.alt && this.domNode.setAttribute("alt", e.alt), this.domNode.classList.add("quill-editor-image-border") } } ImageBlot.blotName = "image", ImageBlot.tagName = "img", window.ImageResize ? (Quill.register("modules/imageResize", ImageResize), Quill.register(ImageBlot, !0)) : console.error("image resize module is not ready"); let toolbarOptions = [["bold", "italic", "underline", "strike"], ["blockquote", "code-block"], ["link", "image", "video"], [{ list: "ordered" }, { list: "bullet" }], [{ script: "sub" }, { script: "super" }], [{ indent: "-1" }, { indent: "+1" }], [{ size: ["small", !1, "large", "huge"] }], [{ header: [1, 2, 3, 4, 5, 6, !1] }], [{ color: [] }, { background: [] }], [{ font: [] }], [{ align: [] }],]; export const initQuill = (e, t, i, l, r) => { endpoint = t; let o = {}, a = []; i ? o.toolbar = { container: [] } : (o.toolbar = { container: toolbarOptions, handlers: { image: imageHandler } }, o.imageResize = {}, a = a = ["bold", "italic", "underline", "strike", "blockquote", "code-block", "list", "header", "script", "size", "color", "background", "align", "font", "image", "video", "indent", "link"]); var n = { debug: "info", modules: o, formats: a, placeholder: l, readOnly: i, theme: r }; quill = new window.Quill(e, n), i ? e.classList.add("hide-toolbar") : e.classList.remove("hide-toolbar") }; export const setQuillHTML = e => { quill && (quill.root.innerHTML = e) }; export const getQuillHTML = () => quill ? quill.root.innerHTML : ""; export const imageHandler = async () => { var e = await editorInstance.invokeMethodAsync("ShowImageModal") }; export const fetchImagesAsync = async () => { try { let e = (await (await fetch(endpoint)).json()).map(e => { let t = e.trim(); return { url: t, name: t ? t.split("/").pop() : "" } }); return JSON.stringify(e) } catch (t) { return console.error("Error fetching images"), JSON.stringify([]) } }; export const insertImage = (e, t, i) => { quill.hasFocus() || quill.focus(); let l = quill.getSelection(); if (l || (l = { index: quill.getLength(), length: 0 }), e) { let r = t.trim(); i = "", r && ((i = r.split("/").pop()).includes("?") && (i = i.split("?")[0]), i || (i = "image")), /\.(jpeg|jpg|gif|png|webp|bmp)$/i.test(r) ? (console.log("Inserting image:", r, "with name:", i), quill.insertEmbed(l.index, "image", { url: r, alt: i })) : alert("Please enter a proper image URL (e.g., ending in .jpg, .png)") } else console.log("Inserting local image with name:", i), quill.insertEmbed(l.index, "image", { url: t, alt: i }) }; export const registerEditorInstance = e => editorInstance = e;