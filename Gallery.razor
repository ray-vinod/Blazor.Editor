@using System.Text.Json

@if (IsVisible)
{
    <div class="g-modal-container">
    <div class="g-modal-content">
        <!-- Modal titlebar -->
        <div class="g-modal-bar">
            <div class="g-modal-title">Image Gallery</div>
            <button @onclick="CloseModal" class="g-modal-close">X</button>
        </div>

        <!-- Search and link -->
        <div class="g-modal-inputs">
            <input @bind="@_linkUrl" type="text" class="g-input g-url-text" placeholder="Enter image URL..." />
            <a @onclick="OnLinkClick" class="g-url-btn">Link</a>
            <input @oninput="OnSearchInput" type="text" class="g-input g-search-text" placeholder="Search images..." />
        </div>

        <!-- Image list -->
        <div class="g-image-list">
            @foreach (var image in Images!)
                {
                    <div @onclick="() => OnImageClick(image)" class="g-image-list-item">
                        <img src="@image.Url" class="g-image-icon" alt="@image.Name" />
                        <p class="g-image-name">@image.Name</p>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public List<ImageFile>? Images { get; set; }

    [Parameter] public EventCallback<ImageFile> OnImageClicked { get; set; }

    [Parameter] public bool IsVisible { get; set; } = false;

    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnSearchTexChanged { get; set; }

    private string? _linkUrl;

    private void OnImageClick(ImageFile image)
    {
        OnImageClicked.InvokeAsync(image);
    }

    private void OnLinkClick()
    {
        if (!string.IsNullOrWhiteSpace(_linkUrl))
        {
            OnImageClicked.InvokeAsync(new ImageFile
                {
                    Url = _linkUrl,
                    Name = string.Empty
                });
        }
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        await OnSearchTexChanged.InvokeAsync(e);
    }

    private void CloseModal()
    {
        IsVisible = false;
        OnClose.InvokeAsync();
    }
}